#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 aPos;
layout(location = 1) in vec3 aNormal;
layout(location = 2) in vec2 vertexUV;

// Output data; will be interpolated for each fragment.
out vec3 FragPos;
out vec3 Normal;
out vec2 UV;

// Uniforms
uniform mat4 MVP;
uniform mat4 model;
uniform mat4 view;

void main() {
    // Transform the vertex position
    FragPos = vec3(model * vec4(aPos, 1.0));
    Normal = mat3(transpose(inverse(model))) * aNormal; // Normal transform
    gl_Position = MVP * vec4(aPos, 1.0);

    // Pass UV coordinates to the fragment shader
    UV = vertexUV;
}